(function () {
  'use strict';

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const {LRParser} = CM["@lezer/lr"];
  const parser = LRParser.deserialize({
    version: 14,
    states: "!WQYQPOOOhQPO'#CdOOQO'#Ci'#CiOOQO'#Ce'#CeQYQPOOOOQO,59O,59OOyQPO,59OOOQO-E6c-E6cOOQO1G.j1G.j",
    stateData: "![~O[OSPOS~ORQOSQOTQOVPO~ORQOSQOTQOUTOVPO~ORQOSQOTQOUWOVPO~O",
    goto: "u^PPPPPPPP_ePPPoXQOPSUQSOQUPTVSUXROPSU",
    nodeNames: "âš  LineComment Program Identifier String Boolean ) ( Application",
    maxTerm: 13,
    nodeProps: [
      ["openedBy", 6,"("],
      ["closedBy", 7,")"]
    ],
    skippedNodes: [0,1],
    repeatNodeCount: 1,
    tokenData: "$Q~R]XYzYZz]^zpqzrs!]st!zxy#Yyz#_!Q![#d!]!^#u!c!}#d#R#S#d#T#o#d~!PS[~XYzYZz]^zpqz~!`TOr!]rs!os#O!]#O#P!t#P~!]~!tOS~~!wPO~!]~!}Q#Y#Z#T#h#i#T~#YOT~~#_OV~~#dOU~~#iSR~!Q![#d!c!}#d#R#S#d#T#o#d~#zQP~OY#uZ~#u",
    tokenizers: [0],
    topRules: {"Program":[0,2]},
    tokenPrec: 0
  });

  // @omit
  const {foldNodeProp, foldInside, indentNodeProp} = CM["@codemirror/language"];
  const {styleTags, tags: t} = CM["@lezer/highlight"];

  let parserWithMetadata = parser.configure({
    props: [
      styleTags({
        Identifier: t.variableName,
        Boolean: t.bool,
        String: t.string,
        LineComment: t.lineComment,
        "( )": t.paren
      }),
      indentNodeProp.add({
        Application: context => context.column(context.node.from) + context.unit
      }),
      foldNodeProp.add({
        Application: foldInside
      })
    ]
  });

  //!language
  const {LRLanguage} = CM["@codemirror/language"];

  const exampleLanguage = LRLanguage.define({
    parser: parserWithMetadata,
    languageData: {
      commentTokens: {line: ";"}
    }
  });

  //!completion
  const {completeFromList} = CM["@codemirror/autocomplete"];

  const exampleCompletion = exampleLanguage.data.of({
    autocomplete: completeFromList([
      {label: "defun", type: "keyword"},
      {label: "defvar", type: "keyword"},
      {label: "let", type: "keyword"},
      {label: "cons", type: "function"},
      {label: "car", type: "function"},
      {label: "cdr", type: "function"}
    ])
  });

  //!support
  const {LanguageSupport} = CM["@codemirror/language"];

  function example() {
    return new LanguageSupport(exampleLanguage, [exampleCompletion])
  }

  const {EditorView, basicSetup} = CM["codemirror"];

  new EditorView({
    doc: `(defun check-login (name password) ; absolutely secure\n  (if (equal name "admin")\n    (equal password "12345")\n    #t))`,
    extensions: [basicSetup, example()],
    parent: document.querySelector("#editor")
  });

})();
